# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_rag.ipynb.

# %% auto 0
__all__ = ['db_path', 'chunker', 'model', 'ndim', 'db', 'tbl', 'EmbeddingTable', 'index_man_pages', 'search', 'main']

# %% ../nbs/02_rag.ipynb 3
from chonkie import SentenceChunker
from fastcore.all import *
from lancedb import connect
from lancedb.pydantic import LanceModel, Vector
from pathlib import Path
from sentence_transformers import SentenceTransformer
from subprocess import check_output as co

import os, re, subprocess
os.environ['TOKENIZERS_PARALLELISM'] = 'false'

# %% ../nbs/02_rag.ipynb 6
# set up db path in user's home cache directory
db_path = Path.home() / '.cache' / 'shell_sage' / 'db'
db_path.mkdir(parents=True, exist_ok=True)

# %% ../nbs/02_rag.ipynb 7
chunker = SentenceChunker(tokenizer="gpt2", chunk_size=2_048,
                          chunk_overlap=256, min_sentences_per_chunk=1)

# %% ../nbs/02_rag.ipynb 8
model = SentenceTransformer('thenlper/gte-small')
ndim = model.encode(["Example sentence"]).shape[1]

# %% ../nbs/02_rag.ipynb 10
class EmbeddingTable(LanceModel):
    content: str
    package_name: str
    embedding: Vector(ndim)

# %% ../nbs/02_rag.ipynb 11
db = connect(db_path)
tbl = None
try: tbl = db.open_table("man_pages")
except ValueError:
    tbl = db.create_table("man_pages", schema=EmbeddingTable, mode="create")
    tbl.create_fts_index("content") # for hybrid search

# %% ../nbs/02_rag.ipynb 23
def index_man_pages(cmds, pages):
    for cmd, chunks in zip(cmds, chunker.chunk_batch(pages)):
        embds = model.encode([c.text for c in chunks])
        tbl.add([EmbeddingTable(content=c.text, package_name=cmd, embedding=emb)
                 for c, emb in zip(chunks, embds)])

# %% ../nbs/02_rag.ipynb 25
def search(q: str, limit: int=2, threshold: float=0.5):
    q_emb = model.encode([q])
    df = tbl.search(q_emb).metric("cosine").limit(limit).to_pandas()
    df = df.rename(columns={"_distance": "cosine_distance"})
    df = df[df.cosine_distance < 1 - threshold]
    return df

# %% ../nbs/02_rag.ipynb 29
@call_parse
def main():
    "Index man pages for RAG"
    cmds, pages = _manpages()
    index_man_pages(cmds, pages)
