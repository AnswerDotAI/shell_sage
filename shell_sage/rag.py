# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_rag.ipynb.

# %% auto 0
__all__ = ['db_path', 'chunker', 'model', 'ndim', 'db', 'tbl', 'rerank', 'EmbeddingTable', 'index_manpages', 'index']

# %% ../nbs/02_rag.ipynb 3
from chonkie import SentenceChunker
from fastcore.all import *
from fastprogress.fastprogress import progress_bar
from lancedb import connect
from lancedb.pydantic import LanceModel, Vector
from lancedb.rerankers import LinearCombinationReranker
from lancedb.table import LanceTable
from pathlib import Path
from sentence_transformers import SentenceTransformer
from subprocess import check_output as co

import os, subprocess
os.environ['TOKENIZERS_PARALLELISM'] = 'false'

# %% ../nbs/02_rag.ipynb 6
# set up db path in user's home cache directory
db_path = Path.home() / '.cache' / 'shell_sage' / 'db'
db_path.mkdir(parents=True, exist_ok=True)

# %% ../nbs/02_rag.ipynb 7
chunker = SentenceChunker(tokenizer="gpt2", chunk_size=2_048,
                          chunk_overlap=256, min_sentences_per_chunk=1)

# %% ../nbs/02_rag.ipynb 8
model = SentenceTransformer('thenlper/gte-small')
ndim = model.encode(["Example sentence"]).shape[1]

# %% ../nbs/02_rag.ipynb 10
class EmbeddingTable(LanceModel):
    content: str
    package_name: str
    embedding: Vector(ndim)

# %% ../nbs/02_rag.ipynb 11
db = connect(db_path)
tbl = None
try: tbl = db.open_table("man_pages")
except ValueError:
    tbl = db.create_table("man_pages", schema=EmbeddingTable, mode="create")
    tbl.create_fts_index("content") # for hybrid search

# %% ../nbs/02_rag.ipynb 14
def _section(cmd, section):
    s = co(f'man {cmd} | col -b | sed -n "/^{section}/,/^[A-Z]/p" | sed "$d"',
              shell=True, stderr=subprocess.DEVNULL, text=True).strip()
    return '\n'.join(s.splitlines()[:-1]).strip()

# %% ../nbs/02_rag.ipynb 16
def _get_page(cmd):
    name = _section(cmd, 'NAME')
    synopsis = _section(cmd, 'SYNOPSIS')
    description = _section(cmd, 'DESCRIPTION')
    examples = _section(cmd, 'EXAMPLES')
    return cmd, f"{name}\n\n{synopsis}\n\n{description}\n\n{examples}".strip()

# %% ../nbs/02_rag.ipynb 18
def _manpages(lim=None):
    lines = L(co(['apropos', '-s', '1', '.'], text=True).strip().splitlines())
    lines = lines.map(lambda s: s.split("(")[0].strip())
    cmds = lines.filter(lambda s: s).unique()[:lim]
    pages = parallel(_get_page, cmds, progress=progress_bar).filter(lambda x: x[1])
    return zip(*pages)

# %% ../nbs/02_rag.ipynb 22
def index_manpages(cmds, pages):
    for cmd, chunks in zip(cmds, chunker.chunk_batch(pages)):
        embds = model.encode([c.text for c in chunks])
        tbl.add([EmbeddingTable(content=c.text, package_name=cmd, embedding=emb)
                 for c, emb in zip(chunks, embds)])

# %% ../nbs/02_rag.ipynb 24
rerank = LinearCombinationReranker(weight=0.75)

@patch
@delegates(LanceTable.search)
def search(self:LanceTable, q: str = None, limit: int = 2, threshold: float=0.5, **kwargs):
    q_emb = model.encode([q])
    df = (self._orig_search(query_type='hybrid', **kwargs).text(q)
           .vector(q_emb).metric('cosine').rerank(rerank).limit(limit)
           .to_pandas())
    df = df.rename(columns={'_relevance_score': 'score'})
    return df[df.score > threshold]

# %% ../nbs/02_rag.ipynb 28
@call_parse
def index():
    "Index man pages for RAG"
    cmds, pages = _manpages()
    index_manpages(cmds, pages)
