# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_rag.ipynb.

# %% auto 0
__all__ = ['get_man_pages', 'read_man_page', 'chunk_text', 'get_embeddings', 'init_db', 'create_chunks_table', 'index_man_pages',
           'query_man_pages']

# %% ../nbs/02_rag.ipynb 2
import lancedb
from chonkie import RecursiveChunker
from model2vec import Model2Vec
from pathlib import Path
from typing import List, Dict, Tuple
import subprocess
import re

# %% ../nbs/02_rag.ipynb 4
def get_man_pages() -> List[Dict[str, str]]:
    """Get all available man pages on the system.
    Returns a list of dicts containing title, section, and path for each man page."""
    result = subprocess.run(['apropos', '.'], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
    pages = []
    
    for line in result.stdout.splitlines():
        if not line.strip(): continue
        match = re.match(r'([^(]+)\(([^)]+)\)\s*-\s*(.+)', line)
        if not match: continue
            
        name, section, desc = match.groups()
        name = name.strip()
        
        try:
            path = subprocess.check_output(['man', '-w', name], text=True).strip()
            pages.append({
                'title': name,
                'section': section,
                'description': desc.strip(),
                'path': path
            })
        except:
            continue
            
    return pages

# %% ../nbs/02_rag.ipynb 5
def read_man_page(path: str) -> str:
    """Read a man page and return its text content."""
    try:
        result = subprocess.run(['man', path], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        return result.stdout
    except:
        return ""

# %% ../nbs/02_rag.ipynb 7
def chunk_text(text: str) -> List[str]:
    """Chunk text using Chonkie's RecursiveChunker."""
    chunker = RecursiveChunker()
    chunks = chunker(text)
    return [chunk.text for chunk in chunks]

# %% ../nbs/02_rag.ipynb 9
def get_embeddings(texts: List[str]) -> List[List[float]]:
    """Generate embeddings for a list of text chunks using Model2Vec."""
    model = Model2Vec("minishlab/M2V_base_output")
    return [model.embed(text) for text in texts]

# %% ../nbs/02_rag.ipynb 13
def init_db(db_path: str = "man_index.lance") -> lancedb.db.LanceDB:
    """Initialize or open a LanceDB database."""
    return lancedb.connect(db_path)

def create_chunks_table(db: lancedb.db.LanceDB):
    """Create or replace the man page chunks table."""
    return db.create_table(
        "man_chunks",
        data=[{
            "title": "",
            "section": "",
            "chunk": "",
            "vector": get_embeddings([""])[0]  # Get schema from empty embedding
        }],
        mode="create_or_replace"
    )

# %% ../nbs/02_rag.ipynb 14
def index_man_pages(db_path: str = "man_index.lance"):
    """Index all man pages into the vector database."""
    db = init_db(db_path)
    table = create_chunks_table(db)
    
    pages = get_man_pages()
    for page in pages:
        text = read_man_page(page['path'])
        if not text: continue
            
        chunks = chunk_text(text)
        vectors = get_embeddings(chunks)
        
        # Insert chunks and vectors
        for chunk, vector in zip(chunks, vectors):
            table.add([{
                "title": page['title'],
                "section": page['section'],
                "chunk": chunk,
                "vector": vector
            }])

# %% ../nbs/02_rag.ipynb 15
def query_man_pages(query: str, top_k: int = 5, db_path: str = "man_index.lance") -> List[Dict]:
    """Query the man page index for relevant chunks."""
    db = init_db(db_path)
    table = db.open_table("man_chunks")
    
    # Get query embedding
    query_vector = get_embeddings([query])[0]
    
    # Search for similar chunks
    results = table.search(query_vector).limit(top_k).to_list()
    return results
