[
  {
    "objectID": "core.html#model-setup",
    "href": "core.html#model-setup",
    "title": "Core",
    "section": "Model Setup",
    "text": "Model Setup",
    "crumbs": [
      "Core"
    ]
  },
  {
    "objectID": "core.html#system-environment",
    "href": "core.html#system-environment",
    "title": "Core",
    "section": "System Environment",
    "text": "System Environment\n\n# aliases = _aliases('bash')\n# print(aliases)\n\n\n# print(_sys_info())",
    "crumbs": [
      "Core"
    ]
  },
  {
    "objectID": "core.html#tmux",
    "href": "core.html#tmux",
    "title": "Core",
    "section": "Tmux",
    "text": "Tmux\n\nsource\n\nget_pane\n\n get_pane (n, pid=None)\n\nGet output from a tmux pane\n\n# p = get_pane(20)\n# print(p[:512])\n\n\nsource\n\n\nget_panes\n\n get_panes (n)\n\n\n# ps = get_panes(20)\n# print(ps[:512])\n\n\nco(['tmux', 'display-message', '-p', '#{history-limit}'], text=True).strip()\n\n'2000'\n\n\n\nsource\n\n\ntmux_history_lim\n\n tmux_history_lim ()\n\n\ntmux_history_lim()\n\n2000\n\n\n\nsource\n\n\nget_history\n\n get_history (n, pid='current')",
    "crumbs": [
      "Core"
    ]
  },
  {
    "objectID": "core.html#options-and-shellsage",
    "href": "core.html#options-and-shellsage",
    "title": "Core",
    "section": "Options and ShellSage",
    "text": "Options and ShellSage\n\nsource\n\nget_opts\n\n get_opts (**opts)\n\n\n# opts = get_opts(model=None, log=None, api_base=None, api_key=''); opts\n\n\nsource\n\n\nwith_permission\n\n with_permission (action_desc)\n\n\nprint(tools[1]('.'))\n\nDirectory contents of /home/natedawg/aai-ws/shell_sage/nbs:\n/home/natedawg/aai-ws/shell_sage/nbs/CNAME\n/home/natedawg/aai-ws/shell_sage/nbs/_quarto.yml\n/home/natedawg/aai-ws/shell_sage/nbs/nbdev.yml\n/home/natedawg/aai-ws/shell_sage/nbs/styles.css\n/home/natedawg/aai-ws/shell_sage/nbs/01_config.ipynb\n/home/natedawg/aai-ws/shell_sage/nbs/index.ipynb\n/home/natedawg/aai-ws/shell_sage/nbs/00_core.ipynb\n\n\n\n\nsource\n\n\nget_sage\n\n get_sage (model, mode='default', search=False)\n\n\nm = 'ollama_chat/qwen3:8b'\nssage = get_sage(m)\nssage('Howdy!')\n\n Okay, the user said ‚ÄúHowdy!‚Äù which is a friendly greeting. I need to respond in a welcoming manner. Since there‚Äôs no specific query or command requested, I should just greet them back and offer help. Let me make sure to keep the tone friendly and educational. Maybe add an emoji to keep it approachable. No need for any function calls here since they‚Äôre just saying hello. Alright, time to reply. \nHowdy! üòä I‚Äôm ShellSage, your command-line teaching assistant. How can I help you master shell commands and system administration? Just ask away!\n\n\nid: chatcmpl-c0d4b4c4-6058-4e27-be10-d43194b6f46d\nmodel: ollama_chat/qwen3:8b\nfinish_reason: stop\nusage: Usage(completion_tokens=124, prompt_tokens=940, total_tokens=1064, completion_tokens_details=None, prompt_tokens_details=None)\n\n\n\n\n\nm = 'claude-sonnet-4-20250514'\nssage = get_sage(m, search='l')\nssage('Hi, how are ya?')\n\nHey there! I‚Äôm doing great and ready to help you with shell commands and system administration tasks!\nWhether you need help with: - Command syntax and usage - File operations and text processing - System monitoring and troubleshooting - Scripting and automation - Understanding command output or error messages\nJust let me know what you‚Äôre working on or what you‚Äôd like to learn. Feel free to share any command output, file contents, or specific problems you‚Äôre facing - I‚Äôm here to help you master the command line! üêö\nWhat can I help you with today?\n\n\nid: chatcmpl-70da748f-9164-4692-849d-96e7bf0d22ae\nmodel: claude-sonnet-4-20250514\nfinish_reason: stop\nusage: Usage(completion_tokens=138, prompt_tokens=3099, total_tokens=3237, completion_tokens_details=None, prompt_tokens_details=PromptTokensDetailsWrapper(audio_tokens=None, cached_tokens=0, text_tokens=None, image_tokens=None), cache_creation_input_tokens=0, cache_read_input_tokens=0)\n\n\n\n\n\nsource\n\n\nget_res\n\n get_res (sage, q, opts)\n\n\nprint(Markdown(get_res(ssage, 'Hi!', opts)))\n\nHello! üëã                                                                                                          \n\nI'm ShellSage, your command-line teaching assistant. I'm here to help you learn and master shell commands, system  \nadministration, and anything related to working in the terminal.                                                   \n\nWhat would you like to work on today? You can:                                                                     \n\n ‚Ä¢ Ask about specific commands or their usage                                                                      \n ‚Ä¢ Share command output or file contents you need help understanding                                               \n ‚Ä¢ Get help troubleshooting system issues                                                                          \n ‚Ä¢ Learn about scripting and automation                                                                            \n ‚Ä¢ Or just ask any shell/system administration question!                                                           \n\nWhat's on your mind?                                                                                               \n\n\n\n\nprint(Markdown(get_res(ssage, 'Please use your view command to see what files are in the current directory. Only respond with a single paragraph', opts)))\n\nThe current directory contains several configuration and documentation files for what appears to be a Python       \nproject using nbdev, including Jupyter notebooks (01_config.ipynb, index.ipynb, 00_core.ipynb), configuration files\n(_quarto.yml, nbdev.yml), a custom stylesheet (styles.css), and a CNAME file likely for GitHub Pages hosting - you \ncould explore these files using commands like cat for text files or jupyter notebook to open the .ipynb files.     \n\n\n\n\nprint(Markdown(get_res(ssage, 'Please search the web for interesting facts about Linux. Only respond with a single paragraph.', opts)))\n\nHere are some fascinating facts about Linux that showcase its incredible impact on technology: * * The first Linux \nkernel was only 65 KB in size, yet today * * it has grown to over 30 million lines of code, making it * * the      \nsingle largest open source project on the planet. * * * All of the top 500 fastest supercomputers run Linux, and it\npowers everything from * * smartphones and servers to submarines and space rockets, with * * NASA, SpaceX, and the \nInternational Space Station all relying on Linux. Interestingly, * Linux almost wasn't called Linux - Linus        \nTorvalds originally wanted to name it \"Freax\" but was convinced otherwise, and * the film industry has embraced    \nLinux so thoroughly that over 95% of servers at major animation companies use it, starting with Titanic in 1997.",
    "crumbs": [
      "Core"
    ]
  },
  {
    "objectID": "core.html#logging",
    "href": "core.html#logging",
    "title": "Core",
    "section": "Logging",
    "text": "Logging\n\nsource\n\nmk_db\n\n mk_db ()\n\n\nsource\n\n\nLog\n\n Log ()\n\nInitialize self. See help(type(self)) for accurate signature.\n\n# db = mk_db()\n# log = db.logs.insert(Log(timestamp=datetime.now().isoformat(), query='Hi, who are you?', model='llama3.2',\n#                          response='I am ShellSage, a command-line teaching assistant!', mode='default'))\n# log",
    "crumbs": [
      "Core"
    ]
  },
  {
    "objectID": "core.html#main",
    "href": "core.html#main",
    "title": "Core",
    "section": "Main",
    "text": "Main\n\nsource\n\nmain\n\n main (query:str&lt;ThequerytosendtotheLLM&gt;, v:&lt;Printversion&gt;='%(prog)s\n       1.0.1', pid:str='current', skip_system:bool=False,\n       history_lines:int=None, mode:str='default', model:str=None,\n       search:str=None, api_base:str=None, api_key:str=None,\n       code_theme:str=None, code_lexer:str=None)\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nquery\nstr \n\n\n\n\nv\n\n%(prog)s 1.0.1\n\n\n\npid\nstr\ncurrent\ncurrent, all or tmux pane_id (e.g.¬†%0) for context\n\n\nskip_system\nbool\nFalse\nWhether to skip system information in the AI‚Äôs context\n\n\nhistory_lines\nint\nNone\nNumber of history lines. Defaults to tmux scrollback history length\n\n\nmode\nstr\ndefault\nAvailable ShellSage modes: [‚Äòdefault‚Äô, ‚Äòsassy‚Äô]\n\n\nmodel\nstr\nNone\nThe LLM model that will be invoked on the LLM provider\n\n\nsearch\nstr\nNone\nWheather to allow the LLM to search the internet\n\n\napi_base\nstr\nNone\n\n\n\napi_key\nstr\nNone\n\n\n\ncode_theme\nstr\nNone\nThe code theme to use when rendering ShellSage‚Äôs responses\n\n\ncode_lexer\nstr\nNone\nThe lexer to use for inline code markdown blocks\n\n\n\n\nmain('Teach me about rsync. Reply with a single paragraph.', history_lines=0)\n\nbash: cannot set terminal process group (25798): Inappropriate ioctl for device\nbash: no job control in this shell\n\n\nrsync is a fast, incremental file copy and synchronization tool that compares files (by size and mtime by default) \nand transfers only the differences, locally or over the network (commonly via SSH), making backups and mirroring   \nefficient; key options include -a ‚Äúarchive‚Äù mode (preserves permissions, ownership, times, symlinks), -v for       \nverbosity, -h for human-readable sizes, -n for a dry run (great for previewing changes), -z to compress data in    \ntransit, -P for progress/partial transfers, and -c to verify by checksum (slower but safer); it supports powerful  \nfiltering with --include/--exclude and files via --exclude-from, and understands trailing slash semantics (src/    \nsyncs contents, src syncs the directory itself); use -A and -X to preserve ACLs and xattrs, -H for hard links, and \nnote that preserving owners/permissions across systems may require sudo; the remote form (host:path) uses SSH by   \ndefault, and you can tune it with -e ssh or SSH options; be cautious with --delete, which removes destination files\nnot present at the source; see documentation with man rsync or rsync --help for full details and examples.         \n\n\n\n\nr = f'''\nHello, user! Here are some code blocks:\n\n```python\nfor i in range(10): print(i)\n```\n\n```\nThis doesn't even have a language definition!\n```\n\n```bash\nls **/*\n```\n'''\n\n\ndb = mk_db()\ndb.logs.insert(Log(timestamp=datetime.now().isoformat(), query='', response=r, model='', mode=''))\n\nLog(id=36, timestamp='2025-10-07T17:51:16.549279', query='', response=\"\\nHello, user! Here are some code blocks:\\n\\n```python\\nfor i in range(10): print(i)\\n```\\n\\n```\\nThis doesn't even have a language definition!\\n```\\n\\n```bash\\nls **/*\\n```\\n\", model='', mode='')\n\n\n\nsource\n\n\nextract_cf\n\n extract_cf (idx)\n\n\nextract_cf(0)\n\n'for i in range(10): print(i)'\n\n\n\nsource\n\n\nextract\n\n extract (idx:int, copy:bool=False)\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nidx\nint\n\nIndex of code block to extract\n\n\ncopy\nbool\nFalse\nCopy to clipboard vs send to tmux",
    "crumbs": [
      "Core"
    ]
  },
  {
    "objectID": "config.html",
    "href": "config.html",
    "title": "Configuration",
    "section": "",
    "text": "_cfg_path()\n\nPath('/home/natedawg/.config/shell_sage/shell_sage.conf')\n\n\n\nsource\n\n\n\n ShellSageConfig (model:str='claude-sonnet-4-5-20250929', search:str='',\n                  mode:str='default', api_base:str='', api_key:str='',\n                  history_lines:int=-1, code_theme:str='monokai',\n                  code_lexer:str='python', log:bool=False)\n\n\ncfg = ShellSageConfig()\ncfg\n\nShellSageConfig(model='claude-sonnet-4-5-20250929', search='', mode='default', api_base='', api_key='', history_lines=-1, code_theme='monokai', code_lexer='python', log=False)\n\n\n\nsource\n\n\n\n\n get_cfg ()\n\n\n# cfg = get_cfg()\n# cfg",
    "crumbs": [
      "Configuration"
    ]
  },
  {
    "objectID": "config.html#imports",
    "href": "config.html#imports",
    "title": "Configuration",
    "section": "",
    "text": "_cfg_path()\n\nPath('/home/natedawg/.config/shell_sage/shell_sage.conf')\n\n\n\nsource\n\n\n\n ShellSageConfig (model:str='claude-sonnet-4-5-20250929', search:str='',\n                  mode:str='default', api_base:str='', api_key:str='',\n                  history_lines:int=-1, code_theme:str='monokai',\n                  code_lexer:str='python', log:bool=False)\n\n\ncfg = ShellSageConfig()\ncfg\n\nShellSageConfig(model='claude-sonnet-4-5-20250929', search='', mode='default', api_base='', api_key='', history_lines=-1, code_theme='monokai', code_lexer='python', log=False)\n\n\n\nsource\n\n\n\n\n get_cfg ()\n\n\n# cfg = get_cfg()\n# cfg",
    "crumbs": [
      "Configuration"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ShellSage",
    "section": "",
    "text": "ShellSage is an AI-powered command-line assistant that integrates seamlessly with your terminal workflow through tmux. It provides contextual help for shell operations, making it easier to navigate complex command-line tasks, debug scripts, and manage your system.\nShellSage works with multiple LLM providers including Claude, GPT, and Ollama. It uses tmux to automatically read your terminal history or multiple pane histories to provide contextual assistance. You can pipe command output or file contents directly to ShellSage, and it can view files, search code, create files, and make edits with your permission. When needed, it can even search the internet for up-to-date information. You can also log all your interactions directly to SQLite for later reference.",
    "crumbs": [
      "ShellSage"
    ]
  },
  {
    "objectID": "index.html#overview",
    "href": "index.html#overview",
    "title": "ShellSage",
    "section": "",
    "text": "ShellSage is an AI-powered command-line assistant that integrates seamlessly with your terminal workflow through tmux. It provides contextual help for shell operations, making it easier to navigate complex command-line tasks, debug scripts, and manage your system.\nShellSage works with multiple LLM providers including Claude, GPT, and Ollama. It uses tmux to automatically read your terminal history or multiple pane histories to provide contextual assistance. You can pipe command output or file contents directly to ShellSage, and it can view files, search code, create files, and make edits with your permission. When needed, it can even search the internet for up-to-date information. You can also log all your interactions directly to SQLite for later reference.",
    "crumbs": [
      "ShellSage"
    ]
  },
  {
    "objectID": "index.html#installation",
    "href": "index.html#installation",
    "title": "ShellSage",
    "section": "Installation",
    "text": "Installation\nInstall ShellSage directly from PyPI using pip:\npip install shell-sage",
    "crumbs": [
      "ShellSage"
    ]
  },
  {
    "objectID": "index.html#installing-with-uv",
    "href": "index.html#installing-with-uv",
    "title": "ShellSage",
    "section": "Installing with uv",
    "text": "Installing with uv\nIf you have uv installed then you can use its powerful tool feature to install ShellSage as a global CLI ‚Äî safely, with per-tool isolation and no need for manual virtualenv management.\nuv tool install shell_sage\nThis will make the ssage CLI available everywhere on your system.\nIf you also want to install additional dependencies (for example fastlite), you can do it at install time:\nuv tool install --with fastlite shell_sage\n\nUpgrade\nTo upgrade ShellSage to the latest version:\nuv tool upgrade shell_sage\n\n\nList All Installed Tools\nSee everything you‚Äôve installed via uv tool:\nuv tool list\n\n\nUninstall\nTo completely remove ShellSage and its environment:\nuv tool uninstall shell_sage\nUsing uv tool keeps ShellSage completely isolated from your project dependencies, so you can safely use ssage even when inside another virtual environment.",
    "crumbs": [
      "ShellSage"
    ]
  },
  {
    "objectID": "index.html#prerequisites",
    "href": "index.html#prerequisites",
    "title": "ShellSage",
    "section": "Prerequisites",
    "text": "Prerequisites\nBefore using ShellSage, you‚Äôll need to set up an API key for your chosen LLM provider. By default, ShellSage uses Claude, so you‚Äôll want to export your Anthropic API key:\nexport ANTHROPIC_API_KEY=sk...\nIf you prefer to use OpenAI instead, you can export your OpenAI API key and update your shell sage config to use openai (see the Configuration section below for details):\nexport OPENAI_API_KEY=sk...\nShellSage works best with a properly configured tmux environment. I‚Äôve created a preconfigured tmux configuration that works well with ShellSage. This configuration enables mouse support, adds pane IDs to your status bar so you can quickly reference them when having ShellSage read from specific panes, turns off alternative-screen so editor content like vim stays in the tmux buffer where ShellSage can see it, and adds a convenient shortcut (CTRL+B+E followed by the index number) for automatically extracting code fence blocks into your command prompt.",
    "crumbs": [
      "ShellSage"
    ]
  },
  {
    "objectID": "index.html#getting-started",
    "href": "index.html#getting-started",
    "title": "ShellSage",
    "section": "Getting Started",
    "text": "Getting Started\n\nYour First Command\nOnce installed, try ShellSage with a simple greeting:\n\n!ssage hi\n\nHello! üëã I'm ShellSage, your command-line teaching assistant.                  \n\nI can help you with:                                                            \n\n ‚Ä¢ Shell commands and scripting                                                 \n ‚Ä¢ System administration tasks                                                  \n ‚Ä¢ File operations and text processing                                          \n ‚Ä¢ Git workflows                                                                \n ‚Ä¢ Docker commands                                                              \n ‚Ä¢ And much more!                                                               \n\nI see you have a nice setup with some useful aliases configured (like eza for   \nls, nvim for vim, and various git shortcuts).                                   \n\nWhat would you like to learn or accomplish today?                               \n\n\nIf everything is properly setup, you should see a welcoming greeting back from ShellSage!\n\n\nGetting Help with Commands\nThe most basic use case is asking about shell commands:\n\n!ssage \"how do I list all files including hidden ones?\"\n\nBased on your aliases, you already have a shortcut set up for this!             \n\n                                                                                \n lsa                                                                            \n                                                                                \n\nThis uses your alias which expands to:                                          \n\n                                                                                \n eza -lh --group-directories-first --icons=auto -a                              \n                                                                                \n\nThe -a flag shows all files including hidden ones (those starting with .).      \n\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nAlternative commands:                                                           \n\nIf you want to use the standard ls command directly:                            \n\n                                                                                \n /usr/bin/ls -la                                                                \n                                                                                \n\nOr with your eza setup but without the alias:                                   \n\n                                                                                \n eza -lha --group-directories-first --icons=auto                                \n                                                                                \n\nTip: Hidden files in Linux start with a dot (.), like .bashrc or .config/. The  \n-a flag includes these in the listing.                                          \n\n\nShellSage will provide the command, explain how it works, and give you practical examples.\n\n\nUsing Terminal Context\nShellSage automatically reads your tmux history to understand what you‚Äôre working on:\n\n# After running some commands that produced errors (e.g. find -name \"*.tmp\" .)\n!ssage \"what went wrong with my last command?\"\n\nThe issue is with the argument order in your find command. You placed the path  \n(.) after the expression (-name \"*.tmp\"), but find requires the path to come    \nbefore any options or expressions.                                              \n\n\n                                Correct syntax:                                 \n\n                                                                                \n find . -name \"*.tmp\"                                                           \n                                                                                \n\n\n                                  Explanation:                                  \n\nThe find command structure is:                                                  \n\n                                                                                \n find [path...] [expression]                                                    \n                                                                                \n\n ‚Ä¢ Path (. for current directory) must come first                               \n ‚Ä¢ Expression (-name \"*.tmp\") comes after                                       \n\nYour command had them reversed, which confused find into thinking . was part of \nthe expression rather than the search path.                                     \n\n\n                             Common find patterns:                              \n\n                                                                                \n # Find in current directory                                                    \n find . -name \"*.tmp\"                                                           \n                                                                                \n # Find in specific directory                                                   \n find /path/to/dir -name \"*.tmp\"                                                \n                                                                                \n # Find and delete (be careful!)                                                \n find . -name \"*.tmp\" -delete                                                   \n                                                                                \n\nTip: If you forget the path, find defaults to the current directory, so find    \n-name \"*.tmp\" also works!                                                       \n\n\n\n\nPiping Content for Analysis\nOne of ShellSage‚Äôs most powerful features is analyzing piped input:\n\n# Understand error messages\n!journalctl --since \"1 hour ago\" --no-pager | ssage explain this error\n\nLooking at the error in your system logs, here's what happened:                 \n\n\n                               Core Dump Analysis                               \n\nThe hyprctl command (Hyprland's control utility) crashed with a SIGABRT signal  \nat 13:14:48. This is an abnormal termination.                                   \n\n                         Key Details from Stack Trace:                          \n\n                                                                                \n #7  0x00007f5af929ccc4 _ZSt20__throw_system_errori                             \n #8  0x0000564adef2a4f2 n/a (/usr/bin/hyprctl + 0x44f2)                         \n #9  0x0000564adef36f21 _Z7requestSt17basic_string_viewIcSt11char_traitsIcEEib  \n                                                                                \n\nWhat this means:                                                                \n\n ‚Ä¢ hyprctl threw a C++ system error exception                                   \n ‚Ä¢ The crash occurred in the request() function (frame #9)                      \n ‚Ä¢ This typically happens when hyprctl can't communicate with the Hyprland      \n   compositor                                                                   \n\n                                 Common Causes:                                 \n\n 1 Socket connection failure - Hyprland's IPC socket was unavailable/busy       \n 2 Compositor not responding - Hyprland was temporarily unresponsive            \n 3 Race condition - Command executed during compositor state change             \n\n                            To investigate further:                             \n\n                                                                                \n coredumpctl list hyprctl                                                       \n coredumpctl info 10789                                                         \n                                                                                \n\nNote: This is usually a transient issue. If hyprctl commands work now, it was   \nlikely a one-time glitch. If it persists, check Hyprland's logs with journalctl \n--user -u hyprland or restart your compositor.                                  \n\n\n\n\nWorking with Multiple Tmux Panes\nWhen you have multiple panes open, you can reference specific ones by their ID (shown in your status bar):\n\n\n\nbtop output\n\n\n\n# Analyze what's happening in pane %2\n!ssage --pid %2 \"what can you tell me about this pane?\"\n\nLooking at this btop system monitor output, here's what I can tell you about the\npane:                                                                           \n\n\n                                    Overview                                    \n\nThis is a comprehensive system resource monitor showing real-time performance   \nmetrics for your Arch Linux system.                                             \n\n\n                                Key Information:                                \n\nCPU (Top Section)                                                               \n\n ‚Ä¢ AMD Ryzen 9 5950X (32 threads shown as C0-C15)                               \n ‚Ä¢ Currently at 6% utilization running at 3.8 GHz                               \n ‚Ä¢ Temperature: 58¬∞C, Power: 53.9W                                              \n ‚Ä¢ Load average is very light: 0.05, 0.06, 0.08                                 \n\nGPU                                                                             \n\n ‚Ä¢ 9% utilization, 2.8GB/24GB VRAM used                                         \n ‚Ä¢ 39¬∞C, 36.4W power draw                                                       \n\nMemory (Left Middle)                                                            \n\n ‚Ä¢ Total: 62.7 GiB                                                              \n ‚Ä¢ Used: 4.60 GiB (mostly free at 58.1 GiB available)                           \n ‚Ä¢ Cache: 4.02 GiB                                                              \n ‚Ä¢ Swap: 3.99 GiB total, 0% used                                                \n\nStorage (Right Middle)                                                          \n\n ‚Ä¢ Root partition: 929 GiB total, 10% used (88.6 GiB)                           \n ‚Ä¢ No swap currently in use                                                     \n\nNetwork (Bottom Left)                                                           \n\n ‚Ä¢ Interface: enp4s0 (IP: 192.168.7.169)                                        \n ‚Ä¢ Download: 27.7 KiB/s                                                         \n ‚Ä¢ Upload: 1.84 KiB/s                                                           \n\nProcesses (Right Side)                                                          \n\n ‚Ä¢ Top consumers: Discord, Chromium, Python processes                           \n ‚Ä¢ System has been up for 1 hour 8 minutes 38 seconds                           \n\nYour system is very lightly loaded with plenty of headroom!",
    "crumbs": [
      "ShellSage"
    ]
  },
  {
    "objectID": "index.html#configuration-and-model-providers",
    "href": "index.html#configuration-and-model-providers",
    "title": "ShellSage",
    "section": "Configuration and Model Providers",
    "text": "Configuration and Model Providers\n\nConfiguration File\nShellSage can be customized through a configuration file located at ~/.config/shell_sage/shell_sage.conf:\n[DEFAULT]\nmodel = 'claude-sonnet-4-5-20250929'    # Your preferred model\nsearch = ''                             # Enable web search capability (can be either l,m,h https://lisette.answer.ai/#web-search)\nmode = 'default'                        # or \"sassy\"\napi_base = ''                           # alternative api url base\napi_key = ''                            # alternative api key to use instead of default env var\nhistory_lines = -1                      # Lines of terminal history to include. -1 means include all\ncode_theme = \"monokai\"                  # Syntax highlighting theme\ncode_lexer = \"python\"                   # Default lexer for inline code blocks\nlog = False                             # Enable SQLite logging (required for code extraction)\n\n\nUsing Different Model Providers\nShellSage uses lisette under the hood, which supports any LLM provider via LiteLLM. This means you can use Claude, GPT, Gemini, local models via Ollama, and many others.\n\nLocal Models with Ollama\nFor privacy-conscious users or offline usage, run models locally:\n# First, install and start Ollama, then pull a model\nollama pull qwen3:1.7b\n\n# Use with ShellSage\nssage --model ollama_chat/qwen3:1.7b how do I compress a directory?\n\n# Or set as default in your config.toml\nmodel = \"ollama_chat/qwen3:1.7b\"\n\n\nOpenAI\nssage --model gpt-5 --api_key &lt;your_key_here&gt; explain kubernetes pods\n\n\nGoogle Gemini\nssage --model gemini/gemini-pro --api_key &lt;your_key_here&gt; what is systemd?\n\n\nOther Providers\nFor any provider supported by LiteLLM, set the appropriate API key and use the provider‚Äôs model format:\n# Custom API base\nssage --api-base https://your-api.com --api-key your_key --model your_model your query\nSee the LiteLLM providers documentation for the complete list of supported providers and their model naming conventions.\n\n\n\nCommand Line Overrides\nAny configuration option can be temporarily overridden via command line arguments:\n# Adjust history lines\nssage --history-lines 100 what commands did I just run?\n\n# Change the display theme\nssage --code-theme dracula --code-lexer python show me a python example\nYou can find all available code themes and lexers at https://pygments.org/styles/\n\n\nExtracting and Running Commands\nWhen ShellSage suggests commands, you can extract them directly to your command line. Note that this feature requires you to have logging enabled in your configuration file:\n\n!ssage \"how do I find large files?\"\n\nTo find large files on your system, here are the most useful commands:          \n\n\n            Quick method - Find largest files in current directory:             \n\n                                                                                \n du -ah . | sort -rh | head -20                                                 \n                                                                                \n\nThis shows the 20 largest files/directories, human-readable sizes, sorted       \nlargest first.                                                                  \n\n\n                            More targeted searches:                             \n\nFind files larger than a specific size (e.g., 100MB):                           \n\n                                                                                \n find . -type f -size +100M -exec ls -lh {} \\; | sort -k5 -rh                   \n                                                                                \n\nSearch entire filesystem (requires sudo):                                       \n\n                                                                                \n sudo find / -type f -size +1G -exec ls -lh {} \\; 2&gt;/dev/null                   \n                                                                                \n\nInteractive with ncdu (if installed):                                           \n\n                                                                                \n ncdu /                                                                         \n                                                                                \n\nThis gives you a navigable interface to explore disk usage.                     \n\n\n                                   Breakdown:                                   \n\n ‚Ä¢ -type f = files only (not directories)                                       \n ‚Ä¢ -size +100M = larger than 100 megabytes (use G for gigabytes)                \n ‚Ä¢ sort -rh = reverse sort, human-readable numbers                              \n ‚Ä¢ 2&gt;/dev/null = suppress permission errors                                     \n\nTip: Start with du -ah . | sort -rh | head -20 in your home directory to quickly\nspot space hogs!                                                                \n\n\nShellSage will respond with code blocks. Press Ctrl+B E then enter the index number (0 for first block, 1 for second, etc.) to send that command directly to your prompt. You can also directly use the console script:\n\n!ssage_extract 0\n# inserts \"du -ah . | sort -rh | head -20\" into your tmux prompt\n\n\n\nEnabling Sassy Mode\nFor a more entertaining experience, try sassy mode (GLaDOS-inspired):\n\n!ssage --mode sassy explain git rebase\n\nAh, git rebase. The command that separates the competent developers from those  \nwho still think \"merge commits\" are a personality trait. How delightful that    \nyou're ready to learn about history rewriting.                                  \n\n\n                              What is Git Rebase?                               \n\ngit rebase is a command that rewrites commit history by moving or combining a   \nsequence of commits to a new base commit. Think of it as picking up your branch \nand transplanting it onto a different point in the git tree. It's like time     \ntravel, but with fewer paradoxes and more merge conflicts.                      \n\n\n                                  Basic Syntax                                  \n\n                                                                                \n git rebase &lt;base-branch&gt;                                                       \n                                                                                \n\n\n                 How It Works (In Terms Even Humans Can Grasp)                  \n\nWhen you rebase, Git:                                                           \n\n 1 Finds the common ancestor between your current branch and the target branch  \n 2 Takes all commits from your branch since that ancestor                       \n 3 Temporarily stores them away (how thoughtful)                                \n 4 Resets your branch to match the target branch                                \n 5 Replays your commits one by one on top of it                                 \n\nIt's essentially saying: \"What if my branch had started from here instead?\"     \n\n\n                                Common Use Cases                                \n\n                     1. Keep Your Feature Branch Up-to-Date                     \n\n                                                                                \n git checkout feature-branch                                                    \n git rebase main                                                                \n                                                                                \n # Or the shorthand for those who value efficiency:                             \n git rebase main feature-branch                                                 \n                                                                                \n\n                      2. Interactive Rebase (The Fun Part)                      \n\n                                                                                \n git rebase -i HEAD~3  # Rebase last 3 commits                                  \n                                                                                \n\nThis opens an editor where you can:                                             \n\n ‚Ä¢ pick - Keep the commit (how boring)                                          \n ‚Ä¢ reword - Change the commit message (for those who can't spell)               \n ‚Ä¢ edit - Modify the commit contents                                            \n ‚Ä¢ squash - Combine with previous commit                                        \n ‚Ä¢ fixup - Like squash, but discards the commit message                         \n ‚Ä¢ drop - Delete the commit (pretend it never happened)                         \n\n                               3. Rebase vs Merge                               \n\nMerge:                                                                          \n\n                                                                                \n git merge feature-branch  # Creates a merge commit                             \n                                                                                \n\nResult: Preserves history, creates a \"merge bubble\"                             \n\nRebase:                                                                         \n\n                                                                                \n git rebase main  # Linear history                                              \n                                                                                \n\nResult: Clean, linear history that looks like you knew what you were doing all  \nalong                                                                           \n\n\n                                Example Scenario                                \n\n                                                                                \n # You're on feature-branch, main has moved ahead                               \n git checkout feature-branch                                                    \n git rebase main                                                                \n                                                                                \n # If conflicts occur (and they will, because of course they will):             \n # 1. Fix the conflicts in your editor                                          \n # 2. Stage the resolved files                                                  \n git add &lt;resolved-files&gt;                                                       \n # 3. Continue the rebase                                                       \n git rebase --continue                                                          \n                                                                                \n # Or admit defeat:                                                             \n git rebase --abort                                                             \n                                                                                \n\n\n                 Important Warnings (Please Read, For Science)                  \n\n‚ö†Ô∏è THE GOLDEN RULE: Never rebase commits that have been pushed to a shared/public\nbranch. You'll rewrite history that others depend on, and they'll hate you.     \nWell, more than usual.                                                          \n\n                                                                                \n # Safe - your local feature branch:                                            \n git rebase main  ‚úì                                                             \n                                                                                \n # Dangerous - already pushed to shared repo:                                   \n git rebase main  # Then force push... ‚úó                                        \n git push --force  # Congratulations, you've made enemies                       \n                                                                                \n\n\n                                 Useful Options                                 \n\n                                                                                \n git rebase --continue      # Continue after resolving conflicts                \n git rebase --skip          # Skip current commit (give up on it)               \n git rebase --abort         # Abandon ship, return to pre-rebase state          \n git rebase -i HEAD~5       # Interactive rebase last 5 commits                 \n git rebase --onto A B C    # Advanced: rebase C onto A, starting from B        \n                                                                                \n\n\n                               When to Use Rebase                               \n\n ‚Ä¢ ‚úì Cleaning up local commits before pushing                                   \n ‚Ä¢ ‚úì Keeping feature branches up-to-date with main                              \n ‚Ä¢ ‚úì Creating a clean, linear history                                           \n ‚Ä¢ ‚úì Squashing \"fix typo\" commits (we all make them, apparently)                \n\n\n                             When NOT to Use Rebase                             \n\n ‚Ä¢ ‚úó On public/shared branches                                                  \n ‚Ä¢ ‚úó When you want to preserve exact history                                    \n ‚Ä¢ ‚úó When you're not prepared for conflict resolution                           \n ‚Ä¢ ‚úó Right before a demo (trust me on this one)                                 \n\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nFor more details that you probably won't read: git rebase --help                \n\nNow go forth and rewrite history. Just remember: with great power comes great   \nresponsibility, and with git rebase comes great potential for catastrophic      \nmistakes. But I'm sure you'll be fine.",
    "crumbs": [
      "ShellSage"
    ]
  },
  {
    "objectID": "index.html#contributing",
    "href": "index.html#contributing",
    "title": "ShellSage",
    "section": "Contributing",
    "text": "Contributing\nShellSage is built using nbdev. For detailed contribution guidelines, please see our CONTRIBUTING.md file.\nWe welcome contributions of all kinds:\n\nBug reports\nFeature requests\nDocumentation improvements\nCode contributions\n\nPlease visit our GitHub repository to get started.",
    "crumbs": [
      "ShellSage"
    ]
  }
]